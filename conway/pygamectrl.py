#!/usr/bin/env python3
#
# Cellular automata GUI controller.
#

from utils import *
from board import Board
from ruleset import RulesConway
import pygame
import pygame.locals
pygame.init()

class PygameCtrl:
    CELL_PX_SIZE = 10
    CELL_PX_X = CELL_PX_SIZE
    CELL_PX_Y = CELL_PX_SIZE
    C_WHITE = (255, 255, 255)
    C_BLACK = (0, 0, 0)

    def __init__(self):
        self.w = 600
        self.h = 400

        self.board_x = 50
        self.board_y = 50
        self.grid_start_x = 0
        self.grid_start_y = 0

        # initialise pygame window
        pygame.display.set_caption("conway.py")
        self.screen = pygame.display.set_mode([self.w, self.h])
        self.screen.fill(PygameCtrl.C_WHITE)
        pygame.display.flip()

        # initialise board storage
        self.rules = RulesConway()
        self.board = Board(self.rules, self.board_x, self.board_y)

        # TEMP BOARD TEST {{{
        self.board.set_board(
"""
00000000000000000000000010000000000000000000000000
00000000000000000000001010000000000000000000000000
00000000000011000000110000000000001100000000000000
00000000000100010000110000000000001100000000000000
11000000001000001000110000000000000000000000000000
11000000001000101100001010000000000000000000000000
00000000001000001000000010000000000000000000000000
00000000000100010000000000000000000000000000000000
00000000000011000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
""")
        # }}}

    def draw_board(self):
        # clear the current surface
        self.screen.fill(PygameCtrl.C_WHITE)

        # initialise Rect with 0 for positions b/c we'll be blitting ourselves
        # it at multiple positions
        alive_square = pygame.Surface((PygameCtrl.CELL_PX_X, PygameCtrl.CELL_PX_Y))
        alive_square.fill(PygameCtrl.C_BLACK)
        x_pos = 0
        y_pos = 0
        for cell in self.board.board:
            # TODO: not great, basically assuming states = 0 & 1
            #       this part limits us to 2 states on a 2D board
            if cell.get_state() == self.rules.state_alive:
                self.screen.blit(
                    alive_square, (
                        self.grid_start_x + (x_pos * PygameCtrl.CELL_PX_X),
                        self.grid_start_y + (y_pos * PygameCtrl.CELL_PX_Y)
                        )
                    )
            x_pos += 1
            if x_pos == self.board_x:
                x_pos = 0
                y_pos += 1
            if x_pos > self.board_x:
                logging.error("x_pos more than board_x - board changing its dimensions?")
            if y_pos > self.board_y:
                logging.error("y_pos more than board_y - board changing its dimensions?")
        pygame.display.flip()

    def quit(self):
        pygame.quit()
        sys.exit()



if __name__ == "__main__":
    game = PygameCtrl()
    clock = pygame.time.Clock()
    while True:
        try:
            clock.tick(4)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    game.quit()
            game.draw_board()
            game.board.next_gen()
        except KeyboardInterrupt:
            logging.info("Ctrl-C hit, shutting down...")
            game.quit()
